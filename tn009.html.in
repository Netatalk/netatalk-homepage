<div id="content">
<h1>[TN#009] Netatalk and ZFS nbmand property</h1>

<dl>
<dt><strong>Author</strong></dt>
<dd>Ralph BÃ¶hme</dd>
<dt><strong>Published on</strong></dt>
<dd>April 17, 2012</dd>
</dl>

<p>Running the Netatalk test-suite with a volume on a ZFS set with ZFS property nbmand set to on causes nearly all tests to fail. The reason is (and it&#8217;s something Oracle hides well under the covers): it modifies POSIX semantics up to a point that POSIX compliant applications fail left and right.</p>
<p>We&#8217;ve written and attached a small C program which demonstrates the effect. It opens a file in read/write mode, then forks a child process and in the child process tries to rename the file.</p>
<p>Expected result on a POSIX conforming platform: success.<br/>
Actual result with nbmand=on: permission denied.</p>
<p>Usage:<br/>
$ gcc -o nbmand-demo nbmand-demo.c<br/>
$ cd /path/zfs-set/with/nbmand=off<br/>
$ touch file<br/>
$ /path/to/nbmand-demo file<br/>
&#8230; success &#8230;<br/>
$ cd /path/zfs-set/with/nbmand=on<br/>
$ touch file<br/>
$ /path/to/nbmand-demo file<br/>
&#8230; failure &#8230;</p>
<p>Therefor it is necessary to turn nbmand to off on any ZFS dataset you use for Netatalk AFP volumes.</p>
<p><em>nbmand-demo.c</em></p>
<pre>#define _FILE_OFFSET_BITS 64

#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdint.h>

int main(int argc, char *argv[])
{
    const char *file;
    struct flock fl;
    int fd;
    pid_t pid;

    if (argc != 2) {
        printf("usage: %s FILE\n", argv[0]);
        exit(1);
    }
    file = argv[1];

    printf("Press <RETURN> to open file \"%s\": ", file);
    getchar();

    if ((fd = open(file, O_RDWR)) == -1) {
        perror("open");
        exit(1);
    }

    if ((pid = fork()) == -1) {
        perror("fork");
        exit(1);
    }

    if (pid == 0) {
        /* Child */
        printf("Press <RETURN> to rename file \"%s\" -> \"tmp\": ", file);
        getchar();

        if (rename(file, "tmp") == -1) {
            perror("rename");
        } else {
            printf("renamed.\n");
            rename("tmp", file);
        }

        printf("Press <RETURN> to exit");
        getchar();
        exit(0);
    }

    /* Parent */
    if (waitpid(pid, NULL, 0) != pid) {
        perror("waitpid");
        exit(1);
    }

    close(fd);

    return 0;
}</pre>

</div>
